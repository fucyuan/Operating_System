# 非连续内存分配：分页

## 1. 背景：为什么需要分页？
在操作系统中，内存管理是确保程序高效运行的核心任务。**连续内存分配**容易产生**外部碎片**（分散的空闲内存块无法分配）和**内部碎片**（分配的内存超出程序需求）。**非连续内存分配**通过将程序的内存分布在物理内存的非连续区域，解决了这些问题。**分页（Paging）**是一种非连续内存分配方法，与**分段（Segmentation）**并列为两种主要方式。

分页通过将程序和物理内存划分为固定大小的**页面（Page）**，实现灵活的内存分配。它减少了碎片问题，简化了内存管理，广泛应用于现代操作系统。

## 2. 分页与分段的区别
分页和分段都是非连续内存分配方法，但有以下关键区别：
- **页面大小**：
  - **分页**：页面大小固定（通常为4KB），便于硬件管理。
  - **分段**：段大小可变，基于程序的逻辑结构。
- **地址结构**：
  - **分页**：逻辑地址由**页号（Page Number）**和**页内偏移（Offset）**组成。
  - **分段**：逻辑地址由**段号（Segment Number）**和**段内偏移（Offset）**组成。
- **碎片**：
  - **分页**：无外部碎片，但可能有内部碎片（页面未用满）。
  - **分段**：可能产生外部碎片（段间空闲块分散）。
- **逻辑结构**：
  - **分页**：对程序员透明，页面不反映程序逻辑。
  - **分段**：基于程序逻辑（如代码段、数据段），更直观。

## 3. 分页机制的概念
分页将**逻辑地址空间**和**物理地址空间**划分为固定大小的页面：
- **逻辑页面**：程序的逻辑地址空间被划分为多个页面，每个页面大小固定（如4KB）。
- **物理页面（帧，Frame）**：物理内存被划分为同样大小的页面，称为帧。
- **映射**：操作系统通过**页表（Page Table）**将逻辑页面映射到物理帧。

### 3.1 分页的特点
- **固定大小**：页面大小统一，简化内存分配。
- **无外部碎片**：空闲帧可以分配给任何页面。
- **内部碎片**：页面未用满的部分会浪费（例如，程序需要2.5KB，但分配了4KB）。
- **透明性**：程序员无需关心页面划分，操作系统自动管理。

## 4. 页的地址结构
分页中的**逻辑地址**由两部分组成：
- **页号（Page Number）**：标识逻辑地址所在的页面。
- **页内偏移（Offset）**：表示页面内的具体位置（相对于页面起始地址）。

### 4.1 逻辑地址的表示
假设页面大小为4KB（即4096字节，2^12字节），逻辑地址可以用二进制表示：
- 高位：页号，表示第几个页面。
- 低位：偏移量，表示页面内的字节位置。

例如，32位逻辑地址，页面大小为4KB：
- 偏移量占12位（2^12 = 4096字节）。
- 页号占20位（32 - 12 = 20位，支持2^20 = 1,048,576个页面）。

**例子**：
逻辑地址`0x00001388`（十六进制，十进制为5000）：
- 页面大小4KB（4096字节）。
- 页号 = `5000 ÷ 4096 = 1`（整除）。
- 偏移量 = `5000 % 4096 = 904`。
- 逻辑地址表示为：`(页号=1, 偏移量=904)`。

## 5. 页表（Page Table）
页表是分页机制的核心，用于将逻辑地址映射到物理地址。每个进程有一个独立的页表，存储在内存中，由操作系统维护。

### 5.1 页表的内容
页表的每条记录对应一个逻辑页面，包含：
- **物理帧号（Frame Number）**：页面映射到的物理内存帧的起始地址。
- **有效位（Valid Bit）**：表示页面是否在物理内存中（1表示在内存，0表示不在，可能在磁盘）。
- **访问权限**（可选）：如读、写、执行权限。
- **其他信息**：如页面是否被修改（脏位）。

**例子**：
假设页表如下：

| 页号 | 物理帧号 | 有效位 |
|------|----------|--------|
| 0    | 10       | 1      |
| 1    | 15       | 1      |
| 2    | -        | 0      |

- 页号`1`映射到物理帧`15`，有效。
- 页号`2`无效（可能在磁盘上）。

### 5.2 地址转换过程
将逻辑地址`(页号, 偏移量)`转换为物理地址的步骤：
1. **查找页表**：根据页号查找页表，获取物理帧号和有效位。
2. **检查有效性**：如果有效位为0，触发**缺页中断**（Page Fault），操作系统从磁盘加载页面。
3. **计算物理地址**：物理地址 = 物理帧起始地址 + 偏移量。
   - 物理帧起始地址 = 物理帧号 × 页面大小。

**例子**：
- 逻辑地址：`(页号=1, 偏移量=904)`。
- 页面大小：4KB（4096字节）。
- 页表：页号`1`映射到物理帧`15`，有效位为1。
- 物理帧起始地址 = `15 × 4096 = 61440`。
- 物理地址 = `61440 + 904 = 62344`。

## 6. 硬件支持下的分页寻址
分页依赖硬件支持，通常由**内存管理单元（MMU）**实现。MMU包含：
- **页表基址寄存器（PTBR）**：存储页表的起始地址。
- **地址转换逻辑**：快速完成页号到帧号的映射。

**工作流程**：
1. CPU发出逻辑地址`(页号, 偏移量)`。
2. MMU根据页号查询页表，获取物理帧号。
3. MMU检查有效位，验证访问权限。
4. MMU计算物理地址并访问内存。

**转换缓存（TLB）**：
- 页表查询可能较慢，现代系统使用**转换旁路缓冲（TLB，Translation Lookaside Buffer）**缓存常用页面映射。
- TLB命中时，直接获取物理地址，加速转换。

## 7. 分页机制的优缺点
### 7.1 优点
- **无外部碎片**：固定大小的页面可以分配到任何空闲帧。
- **简单管理**：页面大小统一，分配和释放操作简单。
- **内存保护**：页表支持权限控制，防止非法访问。
- **支持虚拟内存**：通过缺页中断，逻辑地址空间可大于物理内存。

### 7.2 缺点
- **内部碎片**：页面未用满的部分浪费内存（例如，1.5KB程序占用4KB页面）。
- **页表开销**：页表占用内存，进程页面多时开销大。
- **TLB依赖**：频繁的页表查询需要TLB支持，否则性能下降。

## 8. 具体例子：分页在实际程序中的应用
假设一个程序的逻辑地址空间为16KB，页面大小为4KB：
- 逻辑地址空间有`16KB ÷ 4KB = 4`个页面（页号0到3）。
- 物理内存有32KB，分为`32KB ÷ 4KB = 8`个帧。

页表如下：

| 页号 | 物理帧号 | 有效位 | 权限   |
|------|----------|--------|--------|
| 0    | 2        | 1      | 读写   |
| 1    | 5        | 1      | 只读   |
| 2    | 7        | 1      | 读写   |
| 3    | -        | 0      | -      |

**场景1**：访问逻辑地址`5000`（十六进制`0x1388`）：
- 页面大小4KB（4096字节）。
- 页号 = `5000 ÷ 4096 = 1`，偏移量 = `5000 % 4096 = 904`。
- 页表：页号`1`映射到帧`5`，有效。
- 物理帧起始地址 = `5 × 4096 = 20480`。
- 物理地址 = `20480 + 904 = 21384`。

**场景2**：访问逻辑地址`12288`（十六进制`0x3000`）：
- 页号 = `12288 ÷ 4096 = 3`，偏移量 = `12288 % 4096 = 0`。
- 页表：页号`3`无效，触发缺页中断。
- 操作系统从磁盘加载页面，更新页表后重新执行。

**场景3**：尝试写入页号`1`的地址：
- 页号`1`权限为“只读”，写入操作触发访问错误。

## 9. 逻辑地址空间与物理地址空间
- **逻辑地址空间**：程序看到的虚拟地址空间，通常较大（如32位系统支持4GB）。
- **物理地址空间**：实际内存大小，通常较小（如512MB）。
- 分页支持**虚拟内存**，通过将部分页面存储在磁盘（交换区），逻辑地址空间可以远大于物理内存。
- 物理内存不足时，操作系统通过**缺页中断**动态加载页面（后续课程会详细讲解）。

## 10. 分页如何减少碎片
- **无外部碎片**：页面大小固定，空闲帧可分配给任何页面，内存利用率高。
- **内部碎片**：页面未用满的部分浪费，但通常比外部碎片的影响小。
- **例子**：程序需要10KB内存，分配3个4KB页面（共12KB），内部碎片为2KB。

## 11. 总结
分页是一种非连续内存分配方法，通过将逻辑和物理内存划分为固定大小的页面，实现高效的内存管理。核心机制包括：
- **逻辑地址**：由页号和偏移量组成。
- **页表**：存储页面到物理帧的映射。
- **地址转换**：通过页表和硬件（如MMU、TLB）将逻辑地址映射到物理地址。

分页的优点是无外部碎片、简单管理和支持虚拟内存，但可能产生内部碎片和页表开销。对于初学者，理解页表和地址转换的过程是掌握分页的关键，通过具体例子（如逻辑地址到物理地址的计算）可以更直观地理解其工作原理。