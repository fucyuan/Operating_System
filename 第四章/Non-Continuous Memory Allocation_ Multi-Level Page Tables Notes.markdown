# 非连续内存分配：二级与多级页表

## 1. 背景：页表优化的必要性
在分页机制中，**页表（Page Table**是操作系统将逻辑地址映射到物理地址的核心数据结构。每个进程拥有一个页表，记录逻辑页面到物理帧的映射。然而，页表存在以下问题：
- **空间开销**：页表可能占用大量内存。例如，32位系统、4KB页面大小，逻辑地址空间为4GB（2^32字节），需要2^20（约100万）个页面，页表每项4字节，总大小约4MB。
- **时间开销**：每次内存访问需查询页表，增加延迟。

为了解决这些问题，操作系统引入了以下优化技术：
- **转换旁路缓冲（TLB）**：缓存常用页表项到CPU内部，加速地址转换（已在4.3笔记中讲解）。
- **多级页表**：通过分级组织页表，减少空间占用。
- **工具支持**：如`top`工具监控进程内存使用，间接优化页表访问。

本笔记重点讲解**二级页表**和**多级页表**的原理、实现及优缺点，通过具体例子帮助初学者理解。

## 2. 页表的空间开销问题
在单级页表中，所有页面映射存储在一个连续的数组中。对于大地址空间，页表可能占用过多内存：
- **例子**：
  - 32位系统，页面大小4KB（2^12字节）。
  - 逻辑地址空间：4GB（2^32字节），需要2^20（1,048,576）个页面。
  - 页表每项4字节，总大小 = 2^20 × 4 = 4MB。
  - 如果系统运行100个进程，页表总共占用4MB × 100 = 400MB，内存压力巨大。

单级页表的缺点：
- **全覆盖**：即使进程只使用部分地址空间，页表仍需为整个地址空间分配空间。
- **内存浪费**：未使用的页面对应的页表项仍然占用内存。

**多级页表**通过分级组织，只为使用的地址空间分配页表，显著减少空间开销。

## 3. 多级页表的概念
多级页表将页表分成多个层次（例如二级、三级），通过分级索引实现地址转换。每个进程的页表被组织为一个树形结构，只有使用的页面才会分配页表项。

### 3.1 二级页表的原理
二级页表将逻辑地址分为三部分：
- **一级页号（Page Directory Number）**：索引一级页表（页目录）。
- **二级页号（Page Table Number）**：索引二级页表。
- **页内偏移量（Offset）**：页面内的字节偏移。

**结构**：
- **一级页表（页目录）**：存储指向二级页表的地址。
- **二级页表**：存储页面到物理帧的映射。
- 如果某部分地址空间未使用，一级页表无需指向二级页表，节省空间。

**例子**：
- 32位系统，页面大小4KB（2^12字节）。
- 逻辑地址分为：
  - 一级页号：10位（索引1024个一级页表项）。
  - 二级页号：10位（每个二级页表索引1024个页面）。
  - 偏移量：12位（4KB页面）。
- 一级页表大小：1024项 × 4字节 = 4KB。
- 每个二级页表大小：1024项 × 4字节 = 4KB。
- 只为使用的地址空间分配二级页表，未使用部分无需分配。

### 3.2 地址转换过程
将逻辑地址`(一级页号, 二级页号, 偏移量)`转换为物理地址的步骤：
1. **查找一级页表**：根据一级页号获取二级页表的地址。
2. **查找二级页表**：根据二级页号获取物理帧号。
3. **检查有效性**：确认页面在内存中（有效位为1），否则触发缺页中断。
4. **计算物理地址**：物理地址 = 物理帧号 × 页面大小 + 偏移量。

**例子**：
- 逻辑地址：`0x003F1388`（十进制1591624）。
- 页面大小：4KB（4096字节，2^12）。
- 逻辑地址分解：
  - 一级页号：`1591624 ÷ 2^22 = 0`（高10位）。
  - 二级页号：`(1591624 ÷ 2^12) % 2^10 = 975`（中间10位）。
  - 偏移量：`1591624 % 4096 = 904`（低12位）。
- 假设一级页表：
  - 项0指向二级页表地址`0x1000`。
- 假设二级页表（地址`0x1000`）：
  - 项975：帧号`15`，有效位1。
- 物理帧起始地址 = `15 × 4096 = 61440`。
- 物理地址 = `61440 + 904 = 62344`。

### 3.3 多级页表（三级、四级等）
对于64位系统，地址空间更大（如2^64字节），单级或二级页表可能不足以覆盖。现代系统使用三级或四级页表：
- **三级页表**：一级页表 → 二级页表 → 三级页表 → 物理帧。
- **四级页表**：常见于64位系统（如x86-64），逻辑地址分为四级索引+偏移量。
- **优点**：进一步减少空间占用，只为实际使用的地址空间分配页表。
- **缺点**：增加查询层级，地址转换时间更长。

## 4. 多级页表的优缺点
### 4.1 优点
- **节省空间**：只为使用的地址空间分配页表，未使用部分无需存储。
- **灵活性**：支持稀疏地址空间（进程只使用部分内存）。
- **内存保护**：继承页表的权限控制功能。

### 4.2 缺点
- **时间开销**：多级查询增加地址转换时间（需多次访问内存）。
- **复杂性**：页表管理更复杂，操作系统实现成本高。
- **缓存依赖**：依赖TLB缓存常用页表项，否则性能下降。

## 5. TLB与多级页表的结合
**TLB（转换旁路缓冲）**是CPU内部的高速缓存，存储常用页表项，加速地址转换。多级页表增加了查询层级，时间开销更大，因此TLB的作用尤为重要。

### 5.1 TLB如何优化多级页表
- TLB缓存逻辑地址到物理地址的直接映射，跳过多级页表查询。
- **命中**：直接从TLB获取物理帧号，转换时间接近零。
- **缺失**：查询多级页表，更新TLB。

**例子**：
- 逻辑地址：`(一级页号=0, 二级页号=975, 偏移量=904)`。
- TLB内容：

| 页号（一级+二级） | 帧号 | 有效位 |
|-------------------|------|--------|
| (0, 975)          | 15   | 1      |

- TLB命中：直接获取帧号`15`，物理地址 = `15 × 4096 + 904 = 62344`。
- TLB缺失：查询一级页表 → 二级页表，获取帧号并更新TLB。

### 5.2 访问局部性
程序的内存访问具有**时间局部性**（最近访问的页面可能再次访问）和**空间局部性**（访问页面附近的其他地址）。TLB利用局部性缓存常用映射，减少多级页表查询。

**编程建议**：
- 顺序访问内存（如数组遍历），增强空间局部性。
- 避免频繁跨页面访问，减少TLB缺失。

## 6. 工具支持：top与内存优化
**top**工具用于监控系统进程的内存使用，可间接优化页表访问：
- 显示每个进程的内存占用（包括页表）。
- 帮助识别高内存占用的进程，优化内存分配。
- 结合TLB和多级页表，优先缓存活跃进程的页表项，提升性能。

**例子**：
运行`top`显示进程内存：
- 进程A占用10MB，页表约占100KB。
- 优化：调整进程A的内存访问模式，增强局部性，减少TLB缺失。

## 7. 具体例子：二级页表地址转换
假设一个32位系统，页面大小4KB，逻辑地址空间4GB，使用二级页表：
- 逻辑地址：32位，分为10位一级页号、10位二级页号、12位偏移量。
- 一级页表：1024项，每项指向一个二级页表。
- 二级页表：每表1024项，存储帧号。

**场景**：访问逻辑地址`0x003F1388`（十进制1591624）：
1. 逻辑地址分解：
   - 一级页号：`1591624 ÷ 2^22 = 0`。
   - 二级页号：`(1591624 ÷ 2^12) % 2^10 = 975`。
   - 偏移量：`1591624 % 4096 = 904`。
2. 一级页表：
   - 项0：二级页表地址`0x1000`。
3. 二级页表（地址`0x1000`）：
   - 项975：帧号`15`，有效位1。
4. 物理地址：
   - 帧起始地址 = `15 × 4096 = 61440`。
   - 物理地址 = `61440 + 904 = 62344`。

**TLB优化**：
- 若TLB包含`(一级=0, 二级=975) → 帧15`，直接计算物理地址，跳过页表查询。

**空间节省**：
- 如果进程只使用1MB地址空间（256页面），只需1个二级页表（4KB）+一级页表（4KB），总共8KB，而单级页表需4MB。

## 8. 总结
多级页表通过分级组织页表，显著减少空间开销，特别适合稀疏地址空间。二级页表将逻辑地址分为一级页号、二级页号和偏移量，通过两次索引完成地址转换。结合TLB缓存和程序局部性优化，可缓解多级页表的时间开销。关键点包括：
- **二级页表**：一级页表索引二级页表，二级页表存储帧号。
- **空间优化**：只为使用的地址空间分配页表。
- **时间开销**：多级查询需TLB加速。
- **工具支持**：如`top`监控内存使用，优化页表访问。

对于初学者，理解多级页表的结构和地址转换过程（通过例子计算物理地址）是掌握其原理的关键。后续课程将深入探讨虚拟内存和页面替换策略。